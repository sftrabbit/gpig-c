apply plugin: 'java'

buildDir = "../../build"
libsDirName = "bin"

def emitters = ['EarthEmitter', 'TestAppEmitter', 'HTTPResponseTimeEmitter']

sourceSets {
	main {
		java {
			srcDirs = ['src', "${buildDir}/src"]
			exclude 'com/gpigc/dataemitter/DataEmitter.java'
		}
	}
	test {
		java {
			srcDir 'test'
		}
	}
}

import org.apache.tools.ant.filters.ReplaceTokens

emitters.each() { value ->
	task "${value}Copy" (type: Copy) {
		from 'src/com/gpigc/dataemitter'
		into "${buildDir}/src"
		include "DataEmitter.java"
		filter(ReplaceTokens, tokens: [StubEmitter: value],
		       beginToken: '_', endToken: '_')
	}
}

def buildCommon = {
	from sourceSets.main.output

	dependencies {
		compile fileTree(dir: 'lib', include: '*.jar')
	}
	
	into('lib') {
		include '*.jar'
        from 'lib'
    }
    
    def jarList = []
	new File("lib").eachFile() { file->  
		if (file.name.endsWith('.jar')) {
    		jarList << "lib/" + file.getName()
    	}
	}

	manifest {
		attributes 'Main-Class': 'org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader',
		           'Rsrc-Main-Class': 'com.gpigc.dataemitter.DataEmitter',
		           'Class-Path': '.',
		           'Rsrc-Class-Path': "./ ${jarList.join(' ')}"
	}

	from zipTree('lib/jar-in-jar-loader.zip')
}

emitters.each() { value ->
	task "build${value}" (type: Jar, dependsOn: "${value}Copy") {
		configure buildCommon
		archiveName = "${value}.jar"
	}
}
