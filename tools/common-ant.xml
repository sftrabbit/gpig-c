<project name="common-ant" basedir=".">
    
    <!-- Process project parameters -->
    
	<condition property="project.common.libs" value="abcdefg">
		<not><isset property="project.common.libs"/></not>
	</condition>
	
	<condition property="project.common.binlibs" value="abcdefg">
		<not><isset property="project.common.binlibs"/></not>
	</condition>
	
	<condition property="project.dependencies" value="">
		<not><isset property="project.dependencies"/></not>
	</condition>

	<condition property="project.nested-libs" value="abcdefg">
		<not><isset property="project.nested-libs"/></not>
	</condition>
	
	<condition property="project.is-library" value="true">
		<not><isset property="project.main-class"/></not>
	</condition>

	<!-- Determine platform directory name -->
    
	<condition property="platform.name" value="win">
		<os family="windows" />
	</condition>

	<condition property="platform.name" value="osx">
		<os family="mac" />
	</condition>

	<condition property="platform.name" value="linux">
		<and>
			<not>
				<isset property="platform.name" />
			</not>
			<os family="unix" />
		</and>
	</condition>

	<condition property="platform.arch" value="64" else="32">
		<contains string="${os.arch}" substring="64" />
	</condition>

	<property name="platform.dir" value="${platform.name}-${platform.arch}" />

	<!-- OSX requires a special arg to be passed to the JVM -->
	
	<condition property="pass-swt-arg" value="true">
		<and>
			<equals arg1="${platform.name}" arg2="osx" />
			<not><isset property="project.is-library" /></not>
		</and>
	</condition>
	
	<condition property="no-pass-swt-arg" value="true">
		<and>
			<not><isset property="pass-swt-arg" /></not>
			<not><isset property="project.is-library" /></not>
		</and>
	</condition>
	
	<fail message="Only OSX 64-bit, Linux 64-bit, and Windows 32- or 64-bit supported atm" unless="platform.name" />
	
	<!-- Various directories -->

	<property name="bin.dir" value="bin" />
	<property name="lib.dir" value="lib" />
	<property name="binlib.dir" value="binlib" />
	<property name="bin.lib.dir" value="${bin.dir}/lib" />
	<property name="bin.binlib.dir" value="${bin.dir}/binlib" />
	<property name="bin.res.dir" value="${bin.dir}/res" />
	<property name="bin.classes.dir" value="${bin.dir}/classes" />
	<property name="bin.jar.dir" value="${bin.dir}/jar" />
	<property name="src.dir" value="src" />
	<property name="res.dir" value="res" />

	<property name="gpigc.dir" value="../.." />
	<property name="gpigc.tools.dir" value="${gpigc.dir}/tools" />
	<property name="gpigc.lib.dir" value="${gpigc.dir}/lib" />
	<property name="gpigc.binlib.dir" value="${gpigc.dir}/binlib" />
	<property name="gpigc.projects.dir" value="${gpigc.dir}/projects" />

	<property name="relative.gpigc.dir" value=".." />
	<property name="relative.gpigc.tools.dir" value="${relative.gpigc.dir}/tools" />
	<property name="relative.gpigc.lib.dir" value="${relative.gpigc.dir}/lib" />
	<property name="relative.gpigc.binlib.dir" value="${relative.gpigc.dir}/binlib" />
	
	<!--  Determine project and output jar name -->
	
	<basename property="project.dir.name" file="${basedir}" />
	<property name="jar.name" value="${project.dir.name}.jar" />
	
	<!-- Initialise One-Jar -->

	<property name="one-jar.dist.dir" value="${gpigc.tools.dir}/one-jar" />
	<property name="relative.one-jar.dist.dir" value="${relative.gpigc.tools.dir}/one-jar" />
	<import file="${relative.one-jar.dist.dir}/one-jar-ant-task.xml" />

	<property name="ant-contrib.dist.dir" value="${gpigc.tools.dir}/ant-contrib" />
	<property name="relative.ant-contrib.dist.dir" value="${relative.gpigc.tools.dir}/ant-contrib" />
	<import file="${relative.ant-contrib.dist.dir}/ant-contrib-ant-task.xml" />

	<!-- TARGETS -->
	
	<target name="clean" description="Clean the build directory">
		<delete dir="${bin.dir}" />
	</target>
	
	<target name="prehook" />
	
	<target name="build-dependencies" depends="prehook" unless="nodeps">
	    <for list="${project.dependencies}" param="dependency">
	        <sequential>
	            <property name="dep.@{dependency}.dir" value="${gpigc.projects.dir}/@{dependency}" />
	            <property name="dep.@{dependency}.ant" value="${dep.@{dependency}.dir}/build.xml" />
	            <echo message="Building dependency in ${dep.@{dependency}.dir}" />
	            <ant antfile="${dep.@{dependency}.ant}" target="rebuild" inheritAll="false" useNativeBasedir="true" />
	            <echo message="Done building dependency" />
	        </sequential>
	    </for>
	</target>
	
	<target name="collect-dependencies" depends="build-dependencies">
		<mkdir dir="${bin.lib.dir}" />
	    <for list="${project.dependencies}" param="dependency">
	        <sequential>
	            <property name="dep.@{dependency}.dir" value="${gpigc.projects.dir}/@{dependency}" />
	            <property name="dep.@{dependency}.jar" value="${dep.@{dependency}.dir}/${bin.jar.dir}/@{dependency}.jar" />
	            <echo message="Copying dependency: ${dep.@{dependency}.jar}" />
	            <copy file="${dep.@{dependency}.jar}" todir="${bin.lib.dir}" />
	            <echo message="Done copying dependency" />
	        </sequential>
	    </for>
	</target>

	<target name="collect-libs" depends="collect-dependencies">
		<mkdir dir="${bin.lib.dir}" />
		<mkdir dir="${bin.binlib.dir}" />
		<mkdir dir="${bin.res.dir}" />
		<copy todir="${bin.lib.dir}" includeEmptyDirs="false">
			<fileset dir="${gpigc.lib.dir}" includes="${project.common.libs}" />
			<fileset dir="${gpigc.lib.dir}/${platform.dir}" includes="${project.common.libs}" erroronmissingdir="false" />
			<fileset dir="${lib.dir}" includes="*" erroronmissingdir="false" />
			<fileset dir="${lib.dir}/${platform.dir}" includes="*" erroronmissingdir="false" />
			<fileset dir="${lib.dir}" includes="${project.nested-libs}" erroronmissingdir="false" />
		</copy>
		<copy todir="${bin.binlib.dir}" includeEmptyDirs="false">
			<fileset dir="${gpigc.binlib.dir}" includes="${project.common.binlibs}" />
			<fileset dir="${gpigc.binlib.dir}/${platform.dir}" includes="${project.common.binlibs}" />
			<fileset dir="${binlib.dir}" includes="*" erroronmissingdir="false" />
			<fileset dir="${binlib.dir}/${platform.dir}" includes="*" erroronmissingdir="false" />
		</copy>
		<copy todir="${bin.res.dir}" includeEmptyDirs="false">
			<fileset dir="${res.dir}" includes="**" erroronmissingdir="false" />
		</copy>
	</target>

	<target name="set-classpath" depends="collect-libs">
		<path id="classpath">
			<fileset dir="${bin.lib.dir}" includes="**/*.jar" />
		</path>
	</target>

	<target name="compile" depends="set-classpath">
		<mkdir dir="${bin.classes.dir}" />
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${bin.classes.dir}"
			classpathref="classpath" />
	</target>
	
	<target name="prejar-hook" depends="compile" />

	<target name="jar" depends="prejar-hook" unless="project.is-library">
		<mkdir dir="${bin.jar.dir}" />
		<one-jar destfile="${bin.jar.dir}/${jar.name}">
			<manifest>
				<attribute name="One-Jar-Main-Class" value="${project.main-class}" />
				<attribute name="One-Jar-Expand" value="${res.dir},${binlib.dir}" />
			</manifest>
			<main>
				<fileset dir="${bin.classes.dir}" />
			</main>
			<lib>
				<fileset dir="${bin.lib.dir}" includes="**" />
			</lib>
			<binlib>
				<fileset dir="${bin.binlib.dir}" includes="**" />
			</binlib>
			<fileset dir="." includes="*.properties" />
			<fileset dir="${bin.dir}" includes="${res.dir}/**" />
		</one-jar>
	</target>

	<target name="jar-library" depends="prejar-hook" if="project.is-library">
		<mkdir dir="${bin.jar.dir}" />
    	<jar basedir="${bin.classes.dir}" destfile="${bin.jar.dir}/${jar.name}" />
	</target>

	<target name="run-arg" depends="jar,jar-library" if="pass-swt-arg">
		<java fork="true" jar="${bin.jar.dir}/${jar.name}">
			<jvmarg value="-XstartOnFirstThread" />
			<jvmarg value="-Dorg.apache.jasper.compiler.disablejsr199=true" />
		</java>
	</target>

	<target name="run-noarg" depends="jar,jar-library" if="no-pass-swt-arg">
		<java fork="true" jar="${bin.jar.dir}/${jar.name}">
			<jvmarg value="-Dorg.apache.jasper.compiler.disablejsr199=true" />
		</java>
	</target>

	<target name="run" depends="run-arg,run-noarg" unless="project.is-library" description="Run the latest build" />
	
	<target name="nodeps">
	    <property name="nodeps" value="true" />
	</target>

	<target name="rebuild" depends="clean,jar,jar-library" description="Rebuild the library/application" />

	<target name="rebuild-no-deps" depends="nodeps,clean,jar,jar-library" description="Rebuild the library/application without building dependencies" />

	<target name="rebuild-run" depends="clean,run" unless="project.is-library" description="Rebuild the application and run it" />

	<target name="rebuild-run-no-deps" depends="nodeps,clean,run" unless="project.is-library" description="Rebuild the application and run it without building dependencies" />
</project>
